name: Build Chrome Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build-extension:
    name: Build Chrome Extension Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=${GITHUB_SHA::8}
        else
          VERSION="unknown"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extension version: $VERSION"


    - name: Create extension package directory
      run: |
        mkdir -p chrome-extension-package
        echo "Created package directory"

    - name: Copy Chrome extension files
      run: |
        # Copy all files except excluded ones
        rsync -av \
          --exclude='.git*' \
          --exclude='tests/' \
          --exclude='node_modules/' \
          --exclude='coverage/' \
          --exclude='*.md' \
          --exclude='package*.json' \
          --exclude='jest.config.*' \
          --exclude='.github/' \
          --exclude='chrome-extension-package/' \
          ./ chrome-extension-package/

        # Add package identification files to help with virus scanners
        cd chrome-extension-package

        cd ..
        echo "Files copied to package directory:"
        ls -la chrome-extension-package/

    - name: Validate extension package
      run: |
        cd chrome-extension-package

        # Check required files exist
        REQUIRED_FILES=("manifest.json" "background.js" "popup.html" "options.html")
        MISSING_FILES=()

        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
          fi
        done

        if [ ${#MISSING_FILES[@]} -ne 0 ]; then
          echo "❌ Missing required files: ${MISSING_FILES[*]}"
          exit 1
        fi

        # Validate manifest.json
        if command -v jq &> /dev/null; then
          if ! jq empty manifest.json; then
            echo "❌ Invalid manifest.json"
            exit 1
          fi
          echo "✅ manifest.json is valid JSON"
        else
          if ! python3 -m json.tool manifest.json > /dev/null; then
            echo "❌ Invalid manifest.json"
            exit 1
          fi
          echo "✅ manifest.json is valid JSON"
        fi

        # Show package contents
        echo "📦 Extension package contents:"
        find . -type f | sort

        # Show package size
        PACKAGE_SIZE=$(du -sh . | cut -f1)
        echo "📊 Package size: $PACKAGE_SIZE"

    - name: Prepare extension package
      run: |
        # Get version for naming
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        echo "Preparing extension package for version: $VERSION"
        
        # Create README.txt in the package directory
        cd chrome-extension-package
        echo "PPA Chrome Extension Package" > README.txt
        echo "============================" >> README.txt
        echo "" >> README.txt
        echo "This is a legitimate Chrome Extension package for Professional Profile Analytics." >> README.txt
        echo "" >> README.txt
        echo "Package Contents:" >> README.txt
        echo "- manifest.json: Chrome Extension manifest file" >> README.txt
        echo "- background.js: Extension service worker" >> README.txt
        echo "- popup.html/css/js: Extension popup interface" >> README.txt
        echo "- options.html/css/js: Extension options page" >> README.txt
        echo "- icons/: Extension icons" >> README.txt
        echo "" >> README.txt
        echo "Installation:" >> README.txt
        echo "1. Extract this ZIP file" >> README.txt
        echo "2. Open Chrome -> Extensions (chrome://extensions/)" >> README.txt
        echo "3. Enable Developer Mode" >> README.txt
        echo "4. Click \"Load unpacked\" and select the extracted folder" >> README.txt
        echo "" >> README.txt
        echo "This package is automatically built by GitHub Actions." >> README.txt
        
        echo "📦 Extension package contents:"
        ls -la
        
        cd ..
        echo "✅ Extension package prepared successfully"

    - name: Upload extension files
      uses: actions/upload-artifact@v4
      with:
        name: ppa-chrome-extension-${{ steps.get_version.outputs.VERSION }}
        path: chrome-extension-package/
        retention-days: 90

    - name: Create summary
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        # Calculate total package size
        PACKAGE_SIZE=$(du -sh chrome-extension-package | cut -f1)
        FILE_COUNT=$(find chrome-extension-package -type f | wc -l)

        echo "## 🎉 Chrome Extension Package Built Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Package:** ppa-chrome-extension-$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Size:** $PACKAGE_SIZE" >> $GITHUB_STEP_SUMMARY
        echo "- **Files:** $FILE_COUNT files" >> $GITHUB_STEP_SUMMARY
        echo "- **Format:** Chrome Extension folder (ready to load unpacked)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "- Manifest.json: Valid ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Required files: Present ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Package structure: Valid ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download" >> $GITHUB_STEP_SUMMARY
        echo "The extension package is available as an artifact in this workflow run." >> $GITHUB_STEP_SUMMARY
        echo "Download and extract the ZIP to get the Chrome Extension folder." >> $GITHUB_STEP_SUMMARY
